INTRODUCTION
WELCOME 
WHAT YOU SHOULD KNOW 
EXERCISE FILES 
----------------------------------------------------------------------------------------------------------------------
1. GETTING STARTED
----------------------------------------------------------------------------------------------------------------------
INSTALLING PYTHON 
CHOOSING AN EDITOR OR IDE 

----------------------------------------------------------------------------------------------------------------------
2. PYTHON BASICS
----------------------------------------------------------------------------------------------------------------------
BUILDING HELLO WORLD 
  Python is an intepreted Language. No compilation and then execution needed. Line by line interpret and run
if __name__ == "__main__":
  main()

VARIABLES AND EXPRESSIONS
PYTHON FUNCTIONS
#function with variable number of arguments
def multi_add(*args):
  result = 0;
  for x in args:
    result = result + x
  return result


CONDITIONAL STRUCTURES
  # conditional statements let you use "a if C else b"
  st = "x is less than y" if (x < y) else "x is greater than or equal to y"
  print (st)
  
  # Python does not have support for higher-order conditionals
  # like "switch-case" in other languages
 

LOOPS
# use a for loop over a collection
  days = ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]
  for d in days:
    print (d)


 # use the break and continue statements
  for x in range(5,10):
    #if (x == 7): break
    if (x % 2 == 0): continue
    print (x)


#using the enumerate() function to get index 
  days = ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]
  for i, d in enumerate(days):
    print (i, d)

CLASSES
self keyword = this of Java

class myClass(): #Paranthesis unlike Java
  def method1(self):
    print ("myClass method1")
    
  def method2(self, someString):
    print ("myClass method2: " + someString)


#Refer other Class
class anotherClass(myClass):
  def method2(self):
    print ("anotherClass method2")
    
  def method1(self):
    myClass.method1(self);
    print ("anotherClass method1")


  def main():
  c = myClass()
  c.method1()
  c.method2("This is a string")
  c2 = anotherClass()
  c2.method1()
  c2.method2()
>>>
myClass method1
myClass method2: This is a string
myClass method1
anotherClass method1
anotherClass method2

----------------------------------------------------------------------------------------------------------------------
3. WORKING WITH DATES AND TIME
----------------------------------------------------------------------------------------------------------------------
THE DATE, TIME, AND DATETIME CLASSES
from datetime import date
from datetime import time
from datetime import datetime

def main():
  ## DATE OBJECTS
  # Get today's date from the simple today() method from the date class
  today = date.today()
  print ("Today's date is ", today)
  
  # print out the date's individual components
  print ("Date Components: ", today.day, today.month, today.year)
  
  # retrieve today's weekday (0=Monday, 6=Sunday)
  print ("Today's Weekday #: ", today.weekday())
  days = ["monday","tuesday","wednesday","thursday","friday","saturday","sunday"]
  print ("Which is a " + days[today.weekday()])
  
  ## DATETIME OBJECTS
  # Get today's date from the datetime class
  today = datetime.now()
  print  ("The current date and time is ", today)
  
  # Get the current time
  t = datetime.time(datetime.now())
  print ("The current time is ", t)
  
  
if __name__ == "__main__":
  main();

>>>
Today`s date is  2019-06-27
Date Components:  27 6 2019
Today`s Weekday #:  3
Which is a thursday
The current date and time is  2019-06-27 19:33:57.476046
The current time is  19:33:57.476046


FORMATTING TIME OUTPUT

now.strftime()
from datetime import datetime

def main():
  # Times and dates can be formatted using a set of predefined string
  # control codes 
  now = datetime.now() # get the current date and time
  
  #### Date Formatting ####
  
  # %y/%Y - Year, %a/%A - weekday, %b/%B - month, %d - day of month
  print (now.strftime("The current year is: %Y")) # full year with century
  print (now.strftime("%a, %d %B, %y")) # abbreviated day, num, full month, abbreviated year
  
  # %c - locale's date and time, %x - locale's date, %X - locale's time
  print (now.strftime("Locale date and time: %c"))
  print (now.strftime("Locale date: %x"))
  print (now.strftime("Locale time: %X"))
  
  #### Time Formatting ####
  
  # %I/%H - 12/24 Hour, %M - minute, %S - second, %p - locale's AM/PM
  print (now.strftime("Current time: %I:%M:%S %p")) # 12-Hour:Minute:Second:AM
  print (now.strftime("24-hour time: %H:%M")) # 24-Hour:Minute


if __name__ == "__main__":
  main();
>>>
The current year is: 2019
Thu, 27 June, 19
Locale date and time: Thu Jun 27 19:37:17 2019
Locale date: 06/27/19
Locale time: 19:37:17
Current time: 07:37:17 PM
24-hour time: 19:37



USING TIMEDELTA OBJECTS
#
# Example file for working with timedelta objects
#

from datetime import date
from datetime import time
from datetime import datetime
from datetime import timedelta

# construct a basic timedelta and print it
print (timedelta(days=365, hours=5, minutes=1))

# print today's date
now = datetime.now()
print ("today is: " + str(now))

# print today's date one year from now
print ("one year from now it will be: " + str(now + timedelta(days=365)))

# create a timedelta that uses more than one argument
print ("in two weeks and 3 days it will be: " + str(now + timedelta(weeks=2, days=3)))

# calculate the date 1 week ago, formatted as a string
t = datetime.now() - timedelta(weeks=1)
s = t.strftime("%A %B %d, %Y")
print ("one week ago it was " + s)

### How many days until April Fools' Day?

today = date.today()  # get today's date
afd = date(today.year, 4, 1)  # get April Fool's for the same year
# use date comparison to see if April Fool's has already gone for this year
# if it has, use the replace() function to get the date for next year
if afd < today:
  print ("April Fool's day already went by %d days ago" % ((today-afd).days))
  afd = afd.replace(year=today.year + 1)  # if so, get the date for next year

# Now calculate the amount of time until April Fool's Day  
time_to_afd = afd - today
print ("It's just", time_to_afd.days, "days until next April Fools' Day!")

>>>
365 days, 5:01:00
today is: 2019-06-27 19:40:05.284029
one year from now it will be: 2020-06-26 19:40:05.284029
in two weeks and 3 days it will be: 2019-07-14 19:40:05.284029
one week ago it was Thursday June 20, 2019
April Fool`s day already went by 87 days ago
It`s just 279 days until next April Fools` Day!



WORKING WITH CALENDARS
#
# Example file for working with Calendars
#

import calendar

# create a plain text calendar
c = calendar.TextCalendar(calendar.SUNDAY)
str = c.formatmonth(2017, 1, 0, 0)
print (str)

# create an HTML formatted calendar
hc = calendar.HTMLCalendar(calendar.SUNDAY)
str = hc.formatmonth(2017, 1)
print (str)

# loop over the days of a month
# zeroes mean that the day of the week is in an overlapping month
for i in c.itermonthdays(2017, 8):
  print (i)
  
# The Calendar module provides useful utilities for the given locale,
# such as the names of days and months in both full and abbreviated forms
for name in calendar.month_name:
  print (name)

for day in calendar.day_name:
  print (day)

# Calculate days based on a rule: For example, consider
# a team meeting on the first Friday of every month.
# To figure out what days that would be for each month,
# we can use this script:
print ("Team meetings will be on:")
for m in range(1,13):
  # returns an array of weeks that represent the month
  cal = calendar.monthcalendar(2017, m)
  # The first Friday has to be within the first two weeks
  weekone = cal[0]
  weektwo = cal[1]
   
  if weekone[calendar.FRIDAY] != 0:
    meetday = weekone[calendar.FRIDAY]
  else:
    # if the first friday isn't in the first week, it must be in the second
    meetday = weektwo[calendar.FRIDAY]
      
  print ("%10s %2d" % (calendar.month_name[m], meetday))
>>>

    January 2017
Su Mo Tu We Th Fr Sa
 1  2  3  4  5  6  7
 8  9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28
29 30 31

  January 2017
Sun Mon Tue Wed Thu Fri Sat
1 2 3 4 5 6 7
8 9 10  11  12  13  14
15  16  17  18  19  20  21
22  23  24  25  26  27  28
29  30  31

----------------------------------------------------------------------------------------------------------------------
4. WORKING WITH FILES
----------------------------------------------------------------------------------------------------------------------
READING AND WRITING FILES
#
# Read and write files using the built-in Python file methods
#

def main():  
  # Open a file for writing and create it if it doesn't exist
  f = open("textfile.txt","w+")
  
  # Open the file for appending text to the end
  # f = open("textfile.txt","a+")

  # write some lines of data to the file
  for i in range(10):
    f.write("This is line %d\r\n" % (i+1))
  
  # close the file when done
  f.close()
  
  # Open the file back up and read the contents
  f = open("textfile.txt","r")
  if f.mode == 'r': # check to make sure that the file was opened
    # use the read() function to read the entire file
    # contents = f.read()
    # print (contents)
    
    fl = f.readlines() # readlines reads the individual lines into a list
    for x in fl:
      print (x)
    
if __name__ == "__main__":
  main()
>>>
This is line 1



This is line 2



This is line 3



This is line 4



This is line 5



This is line 6



This is line 7



This is line 8



This is line 9



This is line 10



WORKING WITH OS PATH UTILITIES

#
# Example file for working with os.path module
#

import os
from os import path
import datetime
from datetime import date, time, timedelta
import time

def main():
  # Print the name of the OS
  print (os.name)
  
  # Check for item existence and type
  print ("Item exists: %s" %path.exists("textfile.txt"))
  print ("Item is a file: %s" %path.isfile("textfile.txt"))
  print ("Item is a directory:%s" %path.isdir("textfile.txt"))
  
  # Work with file paths
  print ("Item's path: %s" %path.realpath("textfile.txt"))
  print ("Item's path and name: ",path.split(path.realpath("textfile.txt")))
  
  # Get the modification time
  t = time.ctime(path.getmtime("textfile.txt"))
  print (t)
  print (datetime.datetime.fromtimestamp(path.getmtime("textfile.txt")))
  
  # Calculate how long ago the item was modified
  td= datetime.datetime.now() - datetime.datetime.fromtimestamp(path.getmtime("textfile.txt"))
  print ("It has been " ,td, " since the file was modified")
  print ("Or, " ,td.total_seconds(), " seconds")

if __name__ == "__main__":
  main()




>>>
nt
Item exists: True
Item is a file: True
Item is a directory:False
Item`s path: 'E:\Study\ML\LinkedInLearn\LearningPython\Ex_Files_Learning_Python\Exercise Files\Ch4\textfile.txt'
Item`s path and name:  ('E:\\Study\\ML\\LinkedInLearn\\LearningPython\\Ex_Files_Learning_Python\\Exercise Files\\Ch4', 'textfile.txt')
Thu Jun 27 23:08:25 2019
2019-06-27 23:08:25.518306
It has been  0:14:37.401867  since the file was modified
Or,  877.401867  seconds

USING FILE SYSTEM SHELL METHODS
#
# Example file for working with filesystem shell methods
#
import os
from os import path
import shutil
from shutil import make_archive
from zipfile import ZipFile

def main():
  # make a duplicate of an existing file
  if path.exists("textfile.txt"):
    # get the path to the file in the current directory
    src = path.realpath("textfile.txt");
        
    # # let's make a backup copy by appending "bak" to the name
    dst = src + ".bak"
    # # now use the shell to make a copy of the file
    shutil.copy(src,dst)
    
    # # copy over the permissions, modification times, and other info
    shutil.copystat(src, dst)
    
    # # rename the original file
    os.rename("textfile.txt", "newfile.txt")
    
    # now put things into a ZIP archive
    root_dir,tail = path.split(src)
    shutil.make_archive("archive", "zip", root_dir)

    # more fine-grained control over ZIP files
    with ZipFile("testzip.zip","w") as newzip:
      newzip.write("newfile.txt")
      newzip.write("textfile.txt.bak")
      
if __name__ == "__main__":
  main()
>>>
# FILE RENAMED
# FILE ZIPED
# COPY OF FILE CREATED
# EXTENSION CHANGED
----------------------------------------------------------------------------------------------------------------------
5. WORKING WITH WEB DATA
----------------------------------------------------------------------------------------------------------------------
FETCHING INTERNET DATA
# 
# Example file for retrieving data from the internet
#
import urllib.request # instead of urllib2 like in Python 2.7

def main():
  # open a connection to a URL using urllib2
  webUrl = urllib.request.urlopen("http://www.google.com")
  
  # get the result code and print it
  print ("result code: " ,webUrl.getcode())
  
  # read the data from the URL and print it
  data = webUrl.read()
  print (data)

if __name__ == "__main__":
  main()




WORKING WITH JSON DATA

# 
# Example file for parsing and processing JSON
#

import urllib.request # instead of urllib2 like in Python 2.7
import json

def printResults(data):
  # Use the json module to load the string data into a dictionary
  theJSON = json.loads(data)
  
  # now we can access the contents of the JSON like any other Python object
  if "title" in theJSON["metadata"]:
    print (theJSON["metadata"]["title"])
  
  # output the number of events, plus the magnitude and each event name  
  count = theJSON["metadata"]["count"];
  print (count, " events recorded")
  
  # for each event, print the place where it occurred
  for i in theJSON["features"]:
    print (i["properties"]["place"])
  print ("--------------\n")

  # print the events that only have a magnitude greater than 4
  for i in theJSON["features"]:
    if i["properties"]["mag"] >= 4.0:
      print ("%2.1f" % i["properties"]["mag"], i["properties"]["place"])
  print ("--------------\n")

  # print only the events where at least 1 person reported feeling something
  print ("\n\nEvents that were felt:")
  for i in theJSON["features"]:
    feltReports = i["properties"]["felt"]
    if (feltReports != None):
      if (feltReports > 0):
        print ("%2.1f" % i["properties"]["mag"], i["properties"]["place"], " reported " ,feltReports, " times")
  
  
def main():
  # define a variable to hold the source URL
  # In this case we'll use the free data feed from the USGS
  # This feed lists all earthquakes for the last day larger than Mag 2.5
  urlData = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_day.geojson"
  
  # Open the URL and read the data
  webUrl = urllib.request.urlopen(urlData)
  print ("result code: ",webUrl.getcode())
  if (webUrl.getcode() == 200):
    data = webUrl.read()
    # print out our customized results
    printResults(data)
  else:
    print ("Received an error from server, cannot retrieve results " + str(webUrl.getcode()))

if __name__ == "__main__":
  main()
>>>
result code:  200
USGS Magnitude 2.5+ Earthquakes, Past Day
28  events recorded
232km W of Abepura, Indonesia
95km ESE of Tadine, New Caledonia
52km E of Ndoi Island, Fiji
246km ENE of Enarotali, Indonesia
120km NNW of L'Esperance Rock, New Zealand
47km S of Adak, Alaska
12km WNW of Round Valley, CA
221km W of Abepura, Indonesia
8km NW of Alberto Oviedo Mota, B.C., MX
11km NNE of Songnim, North Korea
138km E of Ust'-Kamchatsk Staryy, Russia
91km S of Kaktovik, Alaska
255km NNW of Dili, East Timor
63km W of Rincon, Puerto Rico
81km SE of Besisora, Indonesia
113km E of Ust'-Kamchatsk Staryy, Russia
72km NNE of Punta Cana, Dominican Republic
6km NW of Delta, B.C., MX
4km WNW of Delta, B.C., MX
3km NE of Pahala, Hawaii
North of Severnaya Zemlya
44km S of Jarm, Afghanistan
13km ESE of Jarm, Afghanistan
63km N of Charlotte Amalie, U.S. Virgin Islands
123km NNW of Charlotte Amalie, U.S. Virgin Islands
71km N of Charlotte Amalie, U.S. Virgin Islands
38km NE of Sutton-Alpine, Alaska
142km NNE of Vieques, Puerto Rico
--------------

4.7 232km W of Abepura, Indonesia
4.7 95km ESE of Tadine, New Caledonia
4.8 52km E of Ndoi Island, Fiji
5.1 246km ENE of Enarotali, Indonesia
6.3 120km NNW of L'Esperance Rock, New Zealand
4.7 221km W of Abepura, Indonesia
4.1 138km E of Ust'-Kamchatsk Staryy, Russia
4.6 255km NNW of Dili, East Timor
4.4 81km SE of Besisora, Indonesia
5.7 113km E of Ust'-Kamchatsk Staryy, Russia
5.1 North of Severnaya Zemlya
4.5 44km S of Jarm, Afghanistan
4.4 13km ESE of Jarm, Afghanistan
--------------



Events that were felt:
3.2 8km NW of Alberto Oviedo Mota, B.C., MX  reported  2  times
4.5 44km S of Jarm, Afghanistan  reported  1  times
2.7 38km NE of Sutton-Alpine, Alaska  reported  1  times

PARSING AND PROCESSING HTML
# 
# Example file for parsing and processing HTML
#

# import the HTMLParser module
# in Python 3 you need to import from html.parser
from html.parser import HTMLParser

metacount = 0;

# create a subclass of HTMLParser and override the handler methods
class MyHTMLParser(HTMLParser):
  # function to handle an opening tag in the doc
  # this will be called when the closing ">" of the tag is reached
  def handle_starttag(self, tag, attrs):
    global metacount
    if tag == "meta":
      metacount += 1

    print ("Encountered a start tag:", tag)
    pos = self.getpos() # returns a tuple indication line and character
    print ("\tAt line: ", pos[0], " position ", pos[1])

    if attrs.__len__() > 0:
      print ("\tAttributes:")
      for a in attrs:
        print ("\t", a[0],"=",a[1])
      
  # function to handle the ending tag
  def handle_endtag(self, tag):
    print ("Encountered an end tag:", tag)
    pos = self.getpos()
    print ("\tAt line: ", pos[0], " position ", pos[1])
    
  # function to handle character and text data (tag contents)
  def handle_data(self, data):
    if (data.isspace()):
      return
    print ("Encountered some text data:", data)
    pos = self.getpos()
    print ("\tAt line: ", pos[0], " position ", pos[1])
  
  # function to handle the processing of HTML comments
  def handle_comment(self, data):
    print ("Encountered comment:", data)
    pos = self.getpos()
    print ("\tAt line: ", pos[0], " position ", pos[1])

def main():
  # instantiate the parser and feed it some HTML
  parser = MyHTMLParser()
    
  # open the sample HTML file and read it
  f = open("samplehtml.html")
  if f.mode == "r":
    contents = f.read() # read the entire file
    parser.feed(contents)
  
  print ("%d meta tags encountered" % metacount)

if __name__ == "__main__":
  main();
  



>>>
Encountered a start tag: html
        At line:  2  position  0
        Attributes:
         lang = en
Encountered a start tag: head
        At line:  3  position  2
Encountered a start tag: meta
        At line:  4  position  4
        Attributes:
         charset = utf-8
Encountered an end tag: meta
        At line:  4  position  4
Encountered a start tag: title
        At line:  5  position  4
Encountered some text data: Sample HTML Document
        At line:  5  position  11
Encountered an end tag: title
        At line:  5  position  31
Encountered a start tag: meta
        At line:  6  position  4
        Attributes:
         name = description
         content = This is a sample HTML file
Encountered an end tag: meta
        At line:  6  position  4
Encountered a start tag: meta
        At line:  7  position  4
        Attributes:
         name = author
         content = Administrator
Encountered an end tag: meta
        At line:  7  position  4
Encountered a start tag: meta
        At line:  8  position  4
        Attributes:
         name = viewport
         content = width=device-width; initial-scale=1.0
Encountered an end tag: meta
        At line:  8  position  4
Encountered comment:  Replace favicon.ico & apple-touch-icon.png in the root of your domain and delete these references 
        At line:  9  position  4
Encountered a start tag: link
        At line:  10  position  4
        Attributes:
         rel = shortcut icon
         href = /favicon.ico
Encountered an end tag: link
        At line:  10  position  4
Encountered a start tag: link
        At line:  11  position  4
        Attributes:
         rel = apple-touch-icon
         href = /apple-touch-icon.png
Encountered an end tag: link
        At line:  11  position  4
Encountered an end tag: head
        At line:  12  position  2
Encountered a start tag: body
        At line:  14  position  2
Encountered a start tag: div
        At line:  15  position  4
Encountered a start tag: header
        At line:  16  position  6
Encountered a start tag: h1
        At line:  17  position  8
Encountered some text data: HTML Sample File
        At line:  17  position  12
Encountered an end tag: h1
        At line:  17  position  28
Encountered an end tag: header
        At line:  18  position  6
Encountered a start tag: nav
        At line:  19  position  6
Encountered a start tag: p
        At line:  20  position  8
Encountered a start tag: a
        At line:  21  position  10
        Attributes:
         href = /
Encountered some text data: Home
        At line:  21  position  22
Encountered an end tag: a
        At line:  21  position  26
Encountered an end tag: p
        At line:  22  position  8
Encountered a start tag: p
        At line:  23  position  8
Encountered a start tag: a
        At line:  24  position  10
        Attributes:
         href = /contact
Encountered some text data: Contact
        At line:  24  position  29
Encountered an end tag: a
        At line:  24  position  36
Encountered an end tag: p
        At line:  25  position  8
Encountered an end tag: nav
        At line:  26  position  6
Encountered a start tag: div
        At line:  27  position  6
Encountered an end tag: div
        At line:  29  position  6
Encountered a start tag: footer
        At line:  30  position  6
Encountered a start tag: p
        At line:  31  position  8
Encountered some text data: © Copyright by Administrator
        At line:  31  position  11
Encountered an end tag: p
        At line:  31  position  44
Encountered an end tag: footer
        At line:  32  position  6
Encountered an end tag: div
        At line:  33  position  4
Encountered an end tag: body
        At line:  34  position  2
Encountered an end tag: html
        At line:  35  position  0
4 meta tags encountered



MANIPULATING XML
# 
# Example file for parsing and processing XML
#

import xml.dom.minidom

def main():
  # use the parse() function to load and parse an XML file
  doc = xml.dom.minidom.parse("samplexml.xml")
  
  # print out the document node and the name of the first child tag
  print (doc.nodeName)
  print (doc.firstChild.tagName)
  
  # get a list of XML tags from the document and print each one
  skills = doc.getElementsByTagName("skill")
  print ("%d skills:" % skills.length)
  for skill in skills:
    print (skill.getAttribute("name"))
    
  # create a new XML tag and add it into the document
  newSkill = doc.createElement("skill")
  newSkill.setAttribute("name", "jQuery")
  doc.firstChild.appendChild(newSkill)

  skills = doc.getElementsByTagName("skill")
  print ("%d skills:" % skills.length)
  for skill in skills:
    print (skill.getAttribute("name"))
        
if __name__ == "__main__":
  main();


----------------------------------------------------------------------------------------------------------------------
CONCLUSION
----------------------------------------------------------------------------------------------------------------------